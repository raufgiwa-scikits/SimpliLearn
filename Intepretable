def weighted_median(data, weights):
    """
    Compute the weighted median of data.

    Parameters:
        data (array-like): Data values.
        weights (array-like): Corresponding weights.

    Returns:
        float: The weighted median.
    """
    data = np.asarray(data)
    weights = np.asarray(weights)

    if len(data) != len(weights):
        raise ValueError("Data and weights must be the same length.")

    # Sort data and weights based on data values
    sorted_idx = np.argsort(data)
    sorted_data = data[sorted_idx]
    sorted_weights = weights[sorted_idx]

    # Compute cumulative sum of weights
    cum_weights = np.cumsum(sorted_weights)
    total_weight = np.sum(sorted_weights)

    # Find the index where cumulative weight exceeds 50% of total
    median_idx = np.searchsorted(cum_weights, total_weight / 2)

    return sorted_data[median_idx]
