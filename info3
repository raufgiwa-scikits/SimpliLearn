import pandas as pd
import ipywidgets as widgets
from IPython.display import display

# Sample DataFrame
data = {'Name': ['Alice', 'Bob', 'Charlie'],
        'Age': [25, 30, 35],
        'City': ['New York', 'Los Angeles', 'Chicago']}
df = pd.DataFrame(data)

# Function to display and allow interactive editing of a DataFrame row
def edit_row(row_index):
    # Create widgets for each column in the row
    name_widget = widgets.Text(value=df.at[row_index, 'Name'], description='Name:')
    age_widget = widgets.IntText(value=df.at[row_index, 'Age'], description='Age:')
    city_widget = widgets.Text(value=df.at[row_index, 'City'], description='City:')
    
    # Display widgets to edit the row
    display(name_widget, age_widget, city_widget)
    
    # Function to save changes back to the DataFrame
    def save_changes(b):
        df.at[row_index, 'Name'] = name_widget.value
        df.at[row_index, 'Age'] = age_widget.value
        df.at[row_index, 'City'] = city_widget.value
        print(f"Row {row_index} updated.")
        display(df)
    
    # Save button
    save_button = widgets.Button(description="Save")
    save_button.on_click(save_changes)
    display(save_button)

# Dropdown to select a row to edit
row_dropdown = widgets.Dropdown(options=list(df.index), description="Select Row:")
edit_button = widgets.Button(description="Edit")

# Display selected row for editing
def on_edit_button_click(b):
    edit_row(row_dropdown.value)

edit_button.on_click(on_edit_button_click)

# Display dropdown and edit button
display(row_dropdown, edit_button)

# Display initial DataFrame
print("Initial DataFrame:")
display(df)
