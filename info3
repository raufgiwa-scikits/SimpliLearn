import pandas as pd
from IPython.display import display, HTML, Javascript
import os

# Define the path to your CSV file
CSV_FILE = 'data.csv'

# Function to load data from the CSV file
def load_data():
    if os.path.exists(CSV_FILE):
        return pd.read_csv(CSV_FILE)
    else:
        # Create an empty dataframe if the file doesn't exist
        return pd.DataFrame(columns=['Column1', 'Column2', 'Column3'])

# Function to save data back to the CSV file
def save_data(df):
    df.to_csv(CSV_FILE, index=False)

# Function to display the table with edit, save, and cancel buttons per row
def display_table(df):
    html = """
    <style>
        table { border-collapse: collapse; width: 100%; }
        table, th, td { border: 1px solid black; }
        th, td { padding: 8px; text-align: left; }
        td { position: relative; }
        .cell-label { display: block; }
        .cell-input { display: none; width: 100%; }
        td.editing .cell-label { display: none; }
        td.editing .cell-input { display: inline-block; }
    </style>
    <table>
        <thead>
            <tr>""" + "".join([f"<th>{col}</th>" for col in df.columns]) + "<th>Actions</th></tr>" + """</thead>
        <tbody>
    """
    # Build table rows with labels and hidden inputs for each cell, and edit, save, cancel buttons
    for i, row in df.iterrows():
        html += f"<tr id='row_{i}'>"
        for j, col in enumerate(df.columns):
            cell_id = f"cell_{i}_{j}"
            value = row[col]
            html += f"""
                <td ondblclick="editRow('{i}')">
                    <span class="cell-label" id="label_{cell_id}">{value}</span>
                    <input type="text" class="cell-input" id="input_{cell_id}" value="{value}">
                </td>
            """
        # Edit, Save, Cancel buttons for each row
        html += f"""
            <td>
                <button onclick="editRow('{i}')" id="edit_button_{i}">Edit</button>
                <button onclick="saveRow('{i}')" id="save_button_{i}" style="display:none;">Save</button>
                <button onclick="cancelRow('{i}')" id="cancel_button_{i}" style="display:none;">Cancel</button>
            </td>
        """
        html += "</tr>"
    
    html += """
        </tbody>
    </table>
    <br>
    <button onclick="commitChanges()">Commit</button>
    
    <script>
        // Function to enable editing on the specific row
        function editRow(row_id) {
            var row = document.getElementById('row_' + row_id);
            row.querySelectorAll('td').forEach(function(cell) {
                cell.classList.add('editing');
            }
    display(HTML(html))

# Function to update the DataFrame from the submitted table data
def handle_commit(table_data):
    global df  # Reference the global DataFrame
    
    for cell, value in table_data.items():
        parts = cell.split('_')
        row_idx = int(parts[1])
        col_idx = int(parts[2])
        col_name = df.columns[col_idx]
        df.at[row_idx, col_name] = value
    
    # Save the updated dataframe back to CSV
    save_data(df)
    print("CSV file updated successfully!")
    display_table(df)  # Refresh the table

# Load the initial data from the CSV file
df = load_data()
display_table(df)




The text describes the concept and calculation of a Centralized Probability Plot for a classification model. Here’s a summary:
	•	Purpose:
	•	To show the total effect of model predictions for each binned feature.
	•	Unlike PDP (Partial Dependence Plot) that averages predictions over the marginal distribution, this plot considers the total prediction for specific population segments.
	•	Calculation Steps:
	1.	Binning: Divide the feature into intervals based on Weight of Evidence (WOE) binning.
	2.	Average Prediction: Calculate the average probability score for each interval.
	3.	Centering: Subtract the overall sample’s average prediction from each bin’s prediction.
	•	Use Case:
	•	Helps in understanding how applicants within specific bins are treated by the model.

Let me know if you need this explained further or if you’d like me to process it into a report or visualization.
