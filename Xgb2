import xgboost as xgb
from sklearn.metrics import mean_squared_error

class EarlyStoppingCallback:
    def __init__(self, monitor_metric, stopping_rounds, tolerance=0.0, verbose=True):
        self.monitor_metric = monitor_metric
        self.stopping_rounds = stopping_rounds
        self.tolerance = tolerance
        self.verbose = verbose
        self.best_score = None
        self.best_iteration = None
        self.wait = 0

    def __call__(self, env):
        current_score = env.evaluation_result_list[0][1]

        if self.best_score is None or current_score < self.best_score - self.tolerance:
            self.best_score = current_score
            self.best_iteration = env.iteration
            self.wait = 0
        else:
            self.wait += 1
            if self.wait >= self.stopping_rounds:
                if self.verbose:
                    print(f"Stopping. Best iteration: {self.best_iteration}, best score: {self.best_score:.5f}")
                raise EarlyStopException()

class EarlyStopException(Exception):
    pass

def early_stop_callback(env):
    try:
        env.model.callback(env)
    except EarlyStopException:
        env.model.best_iteration = env.model.callback.best_iteration
        env.model.best_score = env.model.callback.best_score
        raise EarlyStopException()

# Example usage
# Load data
dtrain = xgb.DMatrix(data=X_train, label=y_train)
dvalid = xgb.DMatrix(data=X_valid, label=y_valid)

# Define parameters
params = {
    'objective': 'reg:squarederror',
    'eval_metric': 'rmse'
}

# Initialize early stopping callback
early_stopping_callback = EarlyStoppingCallback(monitor_metric='rmse', stopping_rounds=10, tolerance=0.001)

# Train the model with early stopping
try:
    model = xgb.train(
        params=params,
        dtrain=dtrain,
        num_boost_round=1000,
        evals=[(dvalid, 'validation')],
        callbacks=[early_stop_callback],
        obj=early_stopping_callback
    )
except EarlyStopException:
    pass

print(f"Best iteration: {model.best_iteration}")
print(f"Best score: {model.best_score:.5f}")
