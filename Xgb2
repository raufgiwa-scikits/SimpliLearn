import numpy as np
from scipy.stats import mode

def w_percentile_cont(data, weights, percentiles):
    idx = np.argsort(data)
    cw = np.cumsum(np.array(weights)[idx])
    return np.interp(np.array(percentiles) / 100 * cw[-1], cw - weights[idx] / 2, np.array(data)[idx]), cw[-1]

def w_mean_cont(data, weights):
    return np.average(data, weights=weights), np.sum(weights)

def w_mode_cont(data, weights):
    return mode(data, axis=None, weights=weights)[0][0], np.sum(weights)

# Example usage for continuous data:
data = [1.2, 2.5, 3.7, 4.6, 5.0]
weights = [10, 20, 10, 5, 5]
percentiles = [25, 50, 75]
print("Weighted Percentile (Cont):", w_percentile_cont(data, weights, percentiles))
print("Weighted Mean (Cont):", w_mean_cont(data, weights))
print("Weighted Mode (Cont):", w_mode_cont(data, weights))


def w_percentile_disc(data, weights, percentiles):
    idx = np.argsort(data)
    cw = np.cumsum(np.array(weights)[idx])
    return np.interp(np.array(percentiles) / 100 * cw[-1], cw - weights[idx] / 2, np.array(data)[idx]), cw[-1]

def w_mean_disc(data, weights):
    return np.average(data, weights=weights), np.sum(weights)

def w_mode_disc(data, weights):
    vals, counts = np.unique(data, return_counts=True)
    max_index = np.argmax(counts)
    return vals[max_index], np.sum(weights)

# Example usage for discrete data:
data = [1, 2, 3, 4, 5]
weights = [10, 20, 10, 5, 5]
percentiles = [25, 50, 75]
print("Weighted Percentile (Disc):", w_percentile_disc(data, weights, percentiles))
print("Weighted Mean (Disc):", w_mean_disc(data, weights))
print("Weighted Mode (Disc):", w_mode_disc(data, weights))
